{"ts":1372842471416,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * Stylus - middleware\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar stylus = require('./stylus')\n  , fs = require('fs')\n  , url = require('url')\n  , basename = require('path').basename\n  , dirname = require('path').dirname\n  , mkdirp = require('mkdirp')\n  , join = require('path').join\n  , debug = require('debug')('stylus:middleware');\n\n/**\n * Import map.\n */\n\nvar imports = {};\n\n/**\n * Return Connect middleware with the given `options`.\n *\n * Options:\n *\n *    `force`     Always re-compile\n *    `src`       Source directory used to find .styl files\n *    `dest`      Destination directory used to output .css files\n *                when undefined defaults to `src`.\n *    `compile`   Custom compile function, accepting the arguments\n *                `(str, path)`.\n *    `compress`  Whether the output .css files should be compressed\n *    `firebug`   Emits debug infos in the generated CSS that can\n *                be used by the FireStylus Firebug plugin\n *    `linenos`   Emits comments in the generated CSS indicating \n *                the corresponding Stylus line\n *\n * Examples:\n * \n * Here we set up the custom compile function so that we may\n * set the `compress` option, or define additional functions.\n * \n * By default the compile function simply sets the `filename`\n * and renders the CSS.\n * \n *      function compile(str, path) {\n *        return stylus(str)\n *          .set('filename', path)\n *          .set('compress', true);\n *      }\n * \n * Pass the middleware to Connect, grabbing .styl files from this directory\n * and saving .css files to _./public_. Also supplying our custom `compile` function.\n * \n * Following that we have a `static()` layer setup to serve the .css\n * files generated by Stylus.\n * \n *      var app = connect();\n * \n *      app.middleware({\n *          src: __dirname\n *        , dest: __dirname + '/public'\n *        , compile: compile\n *      })\n * \n *      app.use(connect.static(__dirname + '/public'));\n * \n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options){\n  options = options || {};\n\n  // Accept src/dest dir\n  if ('string' == typeof options) {\n    options = { src: options };\n  }\n\n  // Force compilation\n  var force = options.force;\n\n  // Source dir required\n  var src = options.src;\n  if (!src) throw new Error('stylus.middleware() requires \"src\" directory');\n\n  // Default dest dir to source\n  var dest = options.dest\n    ? options.dest\n    : src;\n\n  // Default compile callback\n  options.compile = options.compile || function(str, path){\n    return stylus(str)\n      .set('filename', path)\n      .set('compress', options.compress)\n      .set('firebug', options.firebug)\n      .set('linenos', options.linenos);\n  };\n\n  // Middleware\n  return function stylus(req, res, next){\n    if ('GET' != req.method && 'HEAD' != req.method) return next();\n    var path = url.parse(req.url).pathname;\n    if (/\\.css$/.test(path)) {\n      var cssPath = join(dest, path)\n        , stylusPath = join(src, path.replace('.css', '.styl'));\n\n      // Ignore ENOENT to fall through as 404\n      function error(err) {\n        next('ENOENT' == err.code\n          ? null\n          : err);\n      }\n\n      // Force\n      if (force) return compile();\n\n      // Compile to cssPath\n      function compile() {\n        debug('read %s', cssPath);\n        fs.readFile(stylusPath, 'utf8', function(err, str){\n          if (err) return error(err);\n          var style = options.compile(str, stylusPath);\n          var paths = style.options._imports = [];\n          delete imports[stylusPath];\n          style.render(function(err, css){\n            if (err) return next(err);\n            debug('render %s', stylusPath);\n            imports[stylusPath] = paths;\n            mkdirp(dirname(cssPath), 0700, function(err){\n              if (err) return error(err);\n              fs.writeFile(cssPath, css, 'utf8', next);\n            });\n          });\n        });\n      }\n\n      // Re-compile on server restart, disregarding\n      // mtimes since we need to map imports\n      if (!imports[stylusPath]) return compile();\n\n      // Compare mtimes\n      fs.stat(stylusPath, function(err, stylusStats){\n        if (err) return error(err);\n        fs.stat(cssPath, function(err, cssStats){\n          // CSS has not been compiled, compile it!\n          if (err) {\n            if ('ENOENT' == err.code) {\n              debug('not found %s', cssPath);\n              compile();\n            } else {\n              next(err);\n            }\n          } else {\n            // Source has changed, compile it\n            if (stylusStats.mtime > cssStats.mtime) {\n              debug('modified %s', cssPath);\n              compile();\n            // Already compiled, check imports\n            } else {\n              checkImports(stylusPath, function(changed){\n                if (debug && changed.length) {\n                  changed.forEach(function(path) {\n                    debug('modified import %s', path);\n                  });\n                }\n                changed.length ? compile() : next();\n              });\n            }\n          }\n        });\n      });\n    } else {\n      next();\n    }\n  }\n};\n\n/**\n * Check `path`'s imports to see if they have been altered.\n *\n * @param {String} path\n * @param {Function} fn\n * @api private\n */\n\nfunction checkImports(path, fn) {\n  var nodes = imports[path];\n  if (!nodes) return fn();\n  if (!nodes.length) return fn();\n\n  var pending = nodes.length\n    , changed = [];\n\n  nodes.forEach(function(imported){\n    fs.stat(imported.path, function(err, stat){\n      // error or newer mtime\n      if (err || !imported.mtime || stat.mtime > imported.mtime) {\n        changed.push(imported.path);\n      }\n      --pending || fn(changed);\n    });\n  });\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":5829}]],"length":5829}
